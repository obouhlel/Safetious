services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: safetious-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-safetious}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - '${DB_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-safetious}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - safetious-network
  # Api Hono
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: safetious-api
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3000}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-safetious}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-safetious}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
    ports:
      - '${PORT:-3000}:3000'
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - safetious-network
    volumes:
      - ./apps/api:/app:ro
      - /app/node_modules

volumes:
  postgres_data:
    driver: local

networks:
  safetious-network:
    driver: bridge
